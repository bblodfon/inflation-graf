{
  "hash": "be9314d057103cec1ccbab64140d255f",
  "result": {
    "markdown": "---\ntitle: \"Inflation of Graf. (1999) Integrated Brier Score\"\nauthor: \"[John Zobolas](https://github.com/bblodfon)\"\ndate: last-modified\ndescription: \"Proper and improper IBS inflation study\"\nbibliography: references.bib\nformat:\n  html:\n    date: last-modified\n    code-block-bg: true\n    code-copy: true\n    code-fold: show\n    code-overflow: wrap\n    code-block-border-left: true\n    toc: true\n    toc-location: left\n    html-math-method: katex\n    page-layout: full\nexecute:\n  freeze: true\n---\n\n\n\n\n# Aim {-} \n\nWe investigate the inflation that may occur when using two scoring rules for evaluating survival models.\nThe scoring rules are the **Integrated Survival Brier Score (ISBS)** [@Graf1999], and the proposed **re-weighted version (RISBS)** [@Sonabend2022].\nSee [documentation details](https://mlr3proba.mlr-org.com/reference/mlr_measures_surv.graf.html#details) for their respective formulas.\nThe first (ISBS) is not a proper scoring rule [@Rindt2022], the second (RISBS) is [@Sonabend2022].\n\n# Example inflation {-}\n\n:::{.callout-note}\nIn this section we investigate an example where the **proper ISBS gets inflated** (i.e. too large value for the score, compared to the improper version) and show how we can avoid such a thing from happening when evaluating model performance.\n:::\n\nLoad libraries:\n\n::: {.cell result='false'}\n\n```{.r .cell-code}\nlibrary(GGally)\nlibrary(tidyverse)\nlibrary(mlr3proba)\n```\n:::\n\n\nLet's use a dataset where in a particular train/test resampling the issue occurs:\n\n::: {.cell}\n\n```{.r .cell-code}\ninflated_data = readRDS(file = \"inflated_data.rds\")\ntask = inflated_data$task\npart = inflated_data$part\n\ntask\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<TaskSurv:mgus> (176 x 9)\n* Target: time, status\n* Properties: -\n* Features (7):\n  - dbl (6): age, alb, creat, dxyr, hgb, mspike\n  - fct (1): sex\n```\n:::\n:::\n\n\nSeparate train and test data:\n\n::: {.cell}\n\n```{.r .cell-code}\ntask_train = task$clone()$filter(rows = part$train)\ntask_test  = task$clone()$filter(rows = part$test)\n```\n:::\n\n\nKaplan-Meier of the training survival data:\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_d119d582f326f412e9f40bd9142f6699'}\n\n```{.r .cell-code}\nautoplot(task_train) +\n  labs(title = \"Kaplan-Meier (train data)\",\n       subtitle = \"Time-to-event distribution\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nKaplan-Meier of the training censoring data:\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_2585812737069b356b328fbc1a81b918'}\n\n```{.r .cell-code}\nautoplot(task_train, reverse = TRUE) +\n    labs(title = \"Kaplan-Meier (train data)\",\n         subtitle = \"Censoring distribution\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nEstimates of the censoring distribution $G_{KM}(t)$ (values from the above figure):\n\n::: {.cell}\n\n```{.r .cell-code}\nkm_train = task_train$kaplan(reverse = TRUE)\nkm_tbl = tibble(time = km_train$time, surv = km_train$surv)\ntail(km_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 2\n   time  surv\n  <dbl> <dbl>\n1 12140 0.75 \n2 12313 0.625\n3 12319 0.5  \n4 12349 0.25 \n5 12689 0.125\n6 13019 0    \n```\n:::\n:::\n\n\n:::{.callout-important}\nAs we can see from the above figures and table, due to having *at least one censored observation at the last time point*, $G_{KM}(t_{max}) = 0$ for $t_{max} = 13019$.\n:::\n\nIs there an observation **on the test set** that has died (`status` = $1$) on that last time point (or after)?\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_time = max(km_tbl$time) # max time point\n\ntest_times  = task_test$times()\ntest_status = task_test$status()\n\n# get the id of the observation in the test data\nid = which(test_times >= max_time & test_status == 1)\nid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n:::\n\n\nYes there is such observation!\n\nIn `mlr3proba` using `proper = TRUE` for the RISBS calculation, this observation will be weighted by $1/0$ according to the formula.\nPractically, to avoid division by zero, a small value `eps = 0.001` will be used.\n\nLet's train a simple Cox model on the train set and calculate its predictions on the test set:\n\n::: {.cell}\n\n```{.r .cell-code}\ncox = lrn(\"surv.coxph\")\np = cox$train(task, part$train)$predict(task, part$test)\n```\n:::\n\n\nWe calculate the ISBS (improper) and RISBS (proper) scores:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_improper = msr(\"surv.graf\", proper = FALSE, id = \"graf.improper\")\ngraf_proper   = msr(\"surv.graf\", proper = TRUE,  id = \"graf.proper\")\np$score(graf_improper, task = task, train_set = part$train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngraf.improper \n    0.1493429 \n```\n:::\n\n```{.r .cell-code}\np$score(graf_proper, task = task, train_set = part$train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngraf.proper \n   10.64584 \n```\n:::\n:::\n\n\nAs we can see there is **huge difference** between the two versions of the score.\nWe check the *observation-wise* scores (integrated across all time points):\n\nObservation-wise RISBS scores:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_proper$scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   0.08994417   0.02854219   0.04214266   0.15578719   0.05364692\n [6]   0.12969150   0.06463256   0.32033549   2.43262450   0.11602432\n[11]   0.03228501   0.10172088   0.14652850 367.10227335   0.18004727\n[16]   0.21991511   0.09070024   0.03507389   0.19856844   0.07925747\n[21]   0.07732517   0.06982001   0.19468406   0.05267402   0.02419841\n[26]   0.17645640   0.07633691   0.04379196   0.07839955   0.06684222\n[31]   0.05457688   0.02874430   0.04071108   0.00000000   0.00000000\n```\n:::\n:::\n\n\nObservation-wise ISBS scores:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_improper$scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.08994417 0.02854219 0.04214266 0.15578719 0.05364692 0.12969150\n [7] 0.06463256 0.32033549 0.62971109 0.11602432 0.03228501 0.10172088\n[13] 0.14652850 1.07969258 0.16743979 0.21991511 0.09070024 0.03507389\n[19] 0.19856844 0.07925747 0.07732517 0.06982001 0.19468406 0.05267402\n[25] 0.02419841 0.16199516 0.07633691 0.04379196 0.07839955 0.06684222\n[31] 0.05457688 0.02874430 0.04071108 0.03512466 0.46541333\n```\n:::\n:::\n\n\nIt is **the one observation that we identified earlier** that causes the inflation of the RISBS score - it's pretty much an outlier compared to all other values:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_proper$scores[id]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 367.1023\n```\n:::\n:::\n\n\nSame is true for the improper ISBS, value is approximately x10 larger compared to the other observation-wise scores:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_improper$scores[id]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.079693\n```\n:::\n:::\n\n\n# Solution {-}\n\nBy setting `t_max` (time horizon to evaluate the measure up to) to the $95\\%$ quantile of the event times, we can solve the inflation problem of the proper RISBS score, since we will divide by a value larger than zero from the above table of $G_{KM}(t)$ values.\nThe `t_max` time point is:\n\n::: {.cell}\n\n```{.r .cell-code}\nt_max = as.integer(quantile(task_train$unique_event_times(), 0.95))\nt_max\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10080\n```\n:::\n:::\n\n\nIntegrating up to `t_max`, the proper RISBS score is:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_proper_tmax = msr(\"surv.graf\", id = \"graf.proper\", proper = TRUE, t_max = t_max)\np$score(graf_proper_tmax, task = task, train_set = part$train) # ISBS\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngraf.proper \n  0.1436484 \n```\n:::\n:::\n\n\nThe score for the specific observation that had experienced the event at (or beyond) the latest training time point is now:\n\n::: {.cell}\n\n```{.r .cell-code}\ngraf_proper_tmax$scores[id]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.141502\n```\n:::\n:::\n\n\n:::{.callout-tip title=\"Suggestion when calculating time-integrated scoring rules\"}\nTo avoid the inflation of RISBS and generally have a more robust estimation of both RISBS and ISBS scoring rules, we advise to set the `t_max` argument (time horizon).\nThis can be either study-driven or based on a meaningful quantile of the distribution of (usually event) times in your dataset (e.g. $80\\%$).\n:::\n\n# References\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}