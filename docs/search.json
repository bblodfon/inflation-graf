[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Inflation of Graf. (1999) Integrated Brier Score",
    "section": "",
    "text": "Aim\nWe investigate the inflation that may occur when using two scoring rules for evaluating survival models. The scoring rules are the Integrated Survival Brier Score (ISBS) (Graf et al. 1999), and the proposed re-weighted version (RISBS) (Sonabend 2022). See documentation details for their respective formulas. The first (ISBS) is not a proper scoring rule (Rindt et al. 2022), the second (RISBS) is (Sonabend 2022).\n\n\nExample inflation\n\n\n\n\n\n\nNote\n\n\n\nIn this section we investigate an example where the proper ISBS gets inflated (i.e. too large value for the score, compared to the improper version) and show how we can avoid such a thing from happening when evaluating model performance.\n\n\nLoad libraries:\n\n\nCode\nlibrary(GGally)\nlibrary(tidyverse)\nlibrary(mlr3proba)\n\n\nLet’s use a dataset where in a particular train/test resampling the issue occurs:\n\n\nCode\ninflated_data = readRDS(file = \"inflated_data.rds\")\ntask = inflated_data$task\npart = inflated_data$part\n\ntask\n\n\n&lt;TaskSurv:mgus&gt; (176 x 9)\n* Target: time, status\n* Properties: -\n* Features (7):\n  - dbl (6): age, alb, creat, dxyr, hgb, mspike\n  - fct (1): sex\n\n\nSeparate train and test data:\n\n\nCode\ntask_train = task$clone()$filter(rows = part$train)\ntask_test  = task$clone()$filter(rows = part$test)\n\n\nKaplan-Meier of the training survival data:\n\n\nCode\nautoplot(task_train) +\n  labs(title = \"Kaplan-Meier (train data)\",\n       subtitle = \"Time-to-event distribution\")\n\n\n\n\n\nKaplan-Meier of the training censoring data:\n\n\nCode\nautoplot(task_train, reverse = TRUE) +\n    labs(title = \"Kaplan-Meier (train data)\",\n         subtitle = \"Censoring distribution\")\n\n\n\n\n\nEstimates of the censoring distribution G_{KM}(t) (values from the above figure):\n\n\nCode\nkm_train = task_train$kaplan(reverse = TRUE)\nkm_tbl = tibble(time = km_train$time, surv = km_train$surv)\ntail(km_tbl)\n\n\n# A tibble: 6 × 2\n   time  surv\n  &lt;dbl&gt; &lt;dbl&gt;\n1 12140 0.75 \n2 12313 0.625\n3 12319 0.5  \n4 12349 0.25 \n5 12689 0.125\n6 13019 0    \n\n\n\n\n\n\n\n\nImportant\n\n\n\nAs we can see from the above figures and table, due to having at least one censored observation at the last time point, G_{KM}(t_{max}) = 0 for t_{max} = 13019.\n\n\nIs there an observation on the test set that has died (status = 1) on that last time point (or after)?\n\n\nCode\nmax_time = max(km_tbl$time) # max time point\n\ntest_times  = task_test$times()\ntest_status = task_test$status()\n\n# get the id of the observation in the test data\nid = which(test_times &gt;= max_time & test_status == 1)\nid\n\n\n[1] 14\n\n\nYes there is such observation!\nIn mlr3proba using proper = TRUE for the RISBS calculation, this observation will be weighted by 1/0 according to the formula. Practically, to avoid division by zero, a small value eps = 0.001 will be used.\nLet’s train a simple Cox model on the train set and calculate its predictions on the test set:\n\n\nCode\ncox = lrn(\"surv.coxph\")\np = cox$train(task, part$train)$predict(task, part$test)\n\n\nWe calculate the ISBS (improper) and RISBS (proper) scores:\n\n\nCode\ngraf_improper = msr(\"surv.graf\", proper = FALSE, id = \"graf.improper\")\ngraf_proper   = msr(\"surv.graf\", proper = TRUE,  id = \"graf.proper\")\np$score(graf_improper, task = task, train_set = part$train)\n\n\ngraf.improper \n    0.1493429 \n\n\nCode\np$score(graf_proper, task = task, train_set = part$train)\n\n\ngraf.proper \n   10.64584 \n\n\nAs we can see there is huge difference between the two versions of the score. We check the observation-wise scores (integrated across all time points):\nObservation-wise RISBS scores:\n\n\nCode\ngraf_proper$scores\n\n\n [1]   0.08994417   0.02854219   0.04214266   0.15578719   0.05364692\n [6]   0.12969150   0.06463256   0.32033549   2.43262450   0.11602432\n[11]   0.03228501   0.10172088   0.14652850 367.10227335   0.18004727\n[16]   0.21991511   0.09070024   0.03507389   0.19856844   0.07925747\n[21]   0.07732517   0.06982001   0.19468406   0.05267402   0.02419841\n[26]   0.17645640   0.07633691   0.04379196   0.07839955   0.06684222\n[31]   0.05457688   0.02874430   0.04071108   0.00000000   0.00000000\n\n\nObservation-wise ISBS scores:\n\n\nCode\ngraf_improper$scores\n\n\n [1] 0.08994417 0.02854219 0.04214266 0.15578719 0.05364692 0.12969150\n [7] 0.06463256 0.32033549 0.62971109 0.11602432 0.03228501 0.10172088\n[13] 0.14652850 1.07969258 0.16743979 0.21991511 0.09070024 0.03507389\n[19] 0.19856844 0.07925747 0.07732517 0.06982001 0.19468406 0.05267402\n[25] 0.02419841 0.16199516 0.07633691 0.04379196 0.07839955 0.06684222\n[31] 0.05457688 0.02874430 0.04071108 0.03512466 0.46541333\n\n\nIt is the one observation that we identified earlier that causes the inflation of the RISBS score - it’s pretty much an outlier compared to all other values:\n\n\nCode\ngraf_proper$scores[id]\n\n\n[1] 367.1023\n\n\nSame is true for the improper ISBS, value is approximately x10 larger compared to the other observation-wise scores:\n\n\nCode\ngraf_improper$scores[id]\n\n\n[1] 1.079693\n\n\n\n\nSolution\nBy setting t_max (time horizon to evaluate the measure up to) to the 95\\% quantile of the event times, we can solve the inflation problem of the proper RISBS score, since we will divide by a value larger than zero from the above table of G_{KM}(t) values. The t_max time point is:\n\n\nCode\nt_max = as.integer(quantile(task_train$unique_event_times(), 0.95))\nt_max\n\n\n[1] 10080\n\n\nIntegrating up to t_max, the proper RISBS score is:\n\n\nCode\ngraf_proper_tmax = msr(\"surv.graf\", id = \"graf.proper\", proper = TRUE, t_max = t_max)\np$score(graf_proper_tmax, task = task, train_set = part$train) # ISBS\n\n\ngraf.proper \n  0.1436484 \n\n\nThe score for the specific observation that had experienced the event at (or beyond) the latest training time point is now:\n\n\nCode\ngraf_proper_tmax$scores[id]\n\n\n[1] 0.141502\n\n\n\n\n\n\n\n\nSuggestion when calculating time-integrated scoring rules\n\n\n\nTo avoid the inflation of RISBS and generally have a more robust estimation of both RISBS and ISBS scoring rules, we advise to set the t_max argument (time horizon). This can be either study-driven or based on a meaningful quantile of the distribution of (usually event) times in your dataset (e.g. 80\\%).\n\n\n\n\n\n\n\n\n\n\nReferences\n\nGraf, Erika, Claudia Schmoor, Willi Sauerbrei, and Martin Schumacher. 1999. “Assessment and comparison of prognostic classification schemes for survival data.” Statistics in Medicine 18 (17-18): 2529–45. https://doi.org/10.1002/(SICI)1097-0258(19990915/30)18:17/18&lt;2529::AID-SIM274&gt;3.0.CO;2-5.\n\n\nRindt, David, Robert Hu, David Steinsaltz, and Dino Sejdinovic. 2022. “Survival regression with proper scoring rules and monotonic neural networks.” In Proceedings of the 25th International Conference on Artificial Intelligence and Statistics, edited by Gustau Camps-Valls, Francisco J R Ruiz, and Isabel Valera, 151:1190–1205. Proceedings of Machine Learning Research. PMLR. https://proceedings.mlr.press/v151/rindt22a.html.\n\n\nSonabend, Raphael. 2022. “Scoring rules in survival analysis.” https://doi.org/10.48550/arxiv.2212.05260."
  }
]